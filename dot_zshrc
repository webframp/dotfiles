# Base16 Shell
# BASE16_SHELL="$HOME/.base16-manager/chriskempson/base16-shell/"
# BASE16_SHELL="$HOME/.config/base16-shell/"
# [ -n "$PS1" ] && \
#     [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
#     eval "$("$BASE16_SHELL/profile_helper.sh")"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

## Profiling Start
# https://esham.io/2018/02/zsh-profiling
# zmodload zsh/zprof
# zmodload zsh/datetime
# setopt PROMPT_SUBST
# PS4='+$EPOCHREALTIME %N:%i> '

# logfile=$(mktemp zsh_profile.XXXXXXXX)
# echo "Logging to $logfile"
# exec 3>&2 2>$logfile

# setopt XTRACE

#source /etc/zshrc

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
# http://zsh.sourceforge.net/Doc/Release/Options.html
# Protect existing files
setopt NO_CLOBBER
# don't nice background tasks
setopt NO_BG_NICE
setopt NO_HUP
setopt NO_BEEP
# allow functions to have local options
setopt LOCAL_OPTIONS
# allow functions to have local traps
setopt LOCAL_TRAPS
# add timestamps to history
setopt EXTENDED_HISTORY
setopt PROMPT_SUBST
setopt COMPLETE_IN_WORD
setopt CORRECT
# adds history
setopt APPEND_HISTORY
# adds history incrementally and share it across sessions
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
# don't record dupes in history
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_VERIFY
setopt HIST_EXPIRE_DUPS_FIRST
# directory navigation
setopt AUTO_CD
setopt AUTO_PUSHD

# lazy load any custom functions
lazyload_fpath=$HOME/.zsh/autoload
fpath=($lazyload_fpath $fpath)
if [[ -d "$lazyload_fpath" ]]; then
    for func in $lazyload_fpath/*; do
        autoload -Uz ${func:t}
    done
fi
unset lazyload_fpath

## Commpletion setup
# completion https://github.com/getantibody/antibody/issues/242#issuecomment-404588896
# https://github.com/caarlos0/dotfiles/commit/16250fdb5ae2c8f762bb0bfb743bad18e7ae387d
# if completion is failing after new installs run compinit -i once
autoload -Uz compinit
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C

# menu select
unsetopt menu_complete

# completion performance improvements
# Force prefix matching, avoid partial globbing on path
zstyle ':completion:*' accept-exact '*(N)'
# enable completion cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.local/share/zsh/cache

# Ignore completion for non-existent commands
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
#zstyle ':completion:*:functions' ignored-patterns '_*'

# completion behavior adjustments
# Case insensitive, partial-word and substring competion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
# zstyle ':completion:*:*:*:*:*' menu select
# zstyle ':completion:*' special-dirs true
#
# # Colors in the completion list
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

zstyle :omz:plugins:ssh-agent identities id_rsa id_ed25519_appsgit id_ed25519_github

# source $HOME/.zsh/dots.zsh
# completion waiting dots, a slight variation of:
# https://github.com/ohmyzsh/ohmyzsh/blob/40f49342f587167292461242dc13fdb93363278a/lib/completion.zsh#L62
expand-or-complete-with-dots() {
    # toggle line-wrapping off and back on again
    [[ -n "$terminfo[rmam]" && -n "$terminfo[smam]" ]] && echoti rmam
    # use ellipsis unicode char U+2026
    print -Pn "%{%F{red}â€¦%f%}"
    [[ -n "$terminfo[rmam]" && -n "$terminfo[smam]" ]] && echoti smam

    zle expand-or-complete
    zle redisplay
}
# Set the function as the default tab completion widget
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

# requires setopt AUTO_CD so check for it
(( ${(kv)+options[autocd]} )) && {
    rationalise-dot() {
        if [[ $LBUFFER = *.. ]]; then
            LBUFFER+=/..
        else
            LBUFFER+=.
        fi
    }
    zle -N rationalise-dot
    bindkey . rationalise-dot
}

## Aliases
alias reload!='exec "$SHELL" -l'
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion
(( $+commands[exa] )) && {
    alias l='exa'
    alias la='exa -la'
    alias ll='exa -lag'
    alias lg='exa -bghHliS --git'
}
alias alacritty='/Applications/Alacritty.app/Contents/MacOS/alacritty'

# Git
alias gpu='git pull --prune --tags --all'
alias gco='git checkout'
alias gpo='git push origin HEAD'
alias gpa='git push origin --all'
alias gst='git status'
alias gcmh='git commit --amend -C HEAD'

# Docker
alias dockerhostshell='docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh'

# Emacs
alias doom='~/.emacs.d/bin/doom'
alias oc='~/.emacs.d/bin/org-capture'

# Kubernetes
(( $+commands[kubectl] )) && {
    alias k='nocorrect kubectl'
    alias kshell='k run alpine-tmp-shell --rm -i --tty --image alpine:latest -- /bin/sh#'
    compdef __start_kubectl k
    #compdef k=kubectl
    # k create deployment <name> --image=<image> --dry-run=client -o yaml
    # k get --raw /apis/custom.metrics.k8s.io/v1beta1
}

(( $+commands[kubectx] )) && {
    alias kx='kubectx'
    compdef kx=kubectx
}

(( $+commands[kubens] )) && {
    alias kn='kubens'
    compdef kn=kubens
}

(( $+commands[glab] )) && {
    alias mrs='glab mr view $(glab mr list| fzf | awk '{ print $1 }'|sed -e s/\!//) --web'
}
# TODO members, groups, vault, Golang, Rust
cat() {bat $* --plain}
catn() {bat $* --number}

alias c=chezmoi

# Homebrew
alias brews='brew list -1'
alias yay='brew outdated && brew upgrade && brew cleanup'

# Ruby
alias be='bundle exec'

# Pass
alias qp='pass -c "$(find -L "$HOME/.password-store" \( -name .git\* -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null | sed -e "s#${HOME}/.password-store/\{0,1\}##" -e 's#\.gpg##'|sort|fzf)"'
alias qpo='pass otp -c "$(find -L "$HOME/.password-store" \( -name .git\* -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null | sed -e "s#${HOME}/.password-store/\{0,1\}##" -e 's#\.gpg##'|sort|fzf)"'
alias qpe='EDITOR=vim pass edit "$(find -L "$HOME/.password-store" \( -name .git\* -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null | sed -e "s#${HOME}/.password-store/\{0,1\}##" -e 's#\.gpg##'|sort|fzf)"'

# NPM
(( $+commands[npm] )) && {
   alias ng="npm list -g --depth=0 2>/dev/null"
   alias nl="npm list --depth=0 2>/dev/null"
}

## Don't correct a few common commands
# source $HOME/.zsh/correction.zsh
alias cp='nocorrect cp'
alias gist='nocorrect gist'
alias man='nocorrect man'
alias mkdir='nocorrect mkdir'
alias mv='nocorrect mv'
alias mysql='nocorrect mysql'
alias sudo='nocorrect sudo'

(( $+commands[brew] )) && {
    alias brew='nocorrect brew'
}

(( $+commands[direnv] )) && {
    _direnv_hook() {
        eval "$(direnv export zsh)";
    }
    typeset -ag precmd_functions;
    if [[ -z ${precmd_functions[(r)_direnv_hook]} ]]; then
        precmd_functions+=_direnv_hook;
    fi
}

# (( $+commands[fzf] )) && {
#     # https://github.com/junegunn/fzf/wiki/examples#integration-with-z
#     unalias z 2> /dev/null
#     z() {
#         [ $# -gt 0 ] && _z "$*" && return
#         cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
#     }
# }

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/vault vault
complete -C /usr/local/bin/terraform terraform

## Source other files as needed
# zoxide instead of rupa/z
(( $+commands[zoxide] )) && {
    # zoxide init zsh > ~/.zsh/zoxide.zsh
    source ~/.zsh/zoxide.zsh
}

# TODO fzf widgets
# antibody plugin: "ytet5uy4/fzf-widgets"
# bindkey '^r'  fzf-insert-history
# if [[ -f "/usr/local/opt/fzf/shell/completion.zsh" ]]; then
#   source /usr/local/opt/fzf/shell/completion.zsh
# fi
# export FZF_DEFAULT_COMMAND="rg --files"

# When installed from git repo
if [ -d ${HOME}/.bash-my-aws ]; then
    source ~/.bash-my-aws/aliases
    source ~/.bash-my-aws/bash_completion.sh
fi

if [[ -f "$HOME/.zsh/local.zsh" ]]; then
    source $HOME/.zsh/local.zsh
fi

if [[ -f "$HOME/.profile.d/bethel.sh" ]]; then
    source $HOME/.profile.d/bethel.sh
fi

export NODE_VERSIONS=~/.node-versions
if [[ ! -d "$NODE_VERSIONS" ]]; then
    mkdir -p $NODE_VERSIONS
fi
# Load colors from less, and others.
[[ -f ~/.LESS_TERMCAP ]] && . ~/.LESS_TERMCAP

autoload -U select-word-style
select-word-style bash

## ZAW settings
# zstyle ':filter-select' case-insensitive yes
# zstyle ':filter-select' hist-find-no-dups yes
# bindkey '^Xr' zaw-history

## https://github.com/zsh-users/zsh-autosuggestions#key-bindings
bindkey '^ ' autosuggest-accept

## Emacs vterm setup
#
if [[ "$INSIDE_EMACS" = 'vterm' ]] &&
    [[ -n ${EMACS_VTERM_PATH} ]] &&
    [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
    source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh

    find_file() {
        vterm_cmd find-file "$(realpath "$@")"
    }
fi

#[ -f "/Users/sme/.ghcup/env" ] && source "/Users/sme/.ghcup/env" # ghcup-env

# ZSH plugins https://github.com/mattmc3/antidote
# clone antidote if necessary
if ! [[ -e ${ZDOTDIR:-~}/.antidote ]]; then
  git clone https://github.com/mattmc3/antidote.git ${ZDOTDIR:-~}/.antidote
fi

# source antidote and load plugins from `${ZDOTDIR:-~}/.zsh_plugins.txt`
source ${ZDOTDIR:-~}/.antidote/antidote.zsh
antidote load

## And finally p10k for prompt setup
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Profiling End
# unsetopt XTRACE
# exec 2>&3 3>&-

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
